# Generated by Django 5.2 on 2025-04-24 03:46

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FaultStatus',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('device_id', models.TextField()),
                ('fault_type', models.TextField()),
                ('status', models.TextField()),
                ('message', models.TextField(blank=True, null=True)),
                ('detected_at', models.DateTimeField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('did', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fault_status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FaultThreshold',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('temperature_min', models.FloatField(blank=True, null=True)),
                ('temperature_max', models.FloatField(blank=True, null=True)),
                ('humidity_min', models.FloatField(blank=True, null=True)),
                ('humidity_max', models.FloatField(blank=True, null=True)),
                ('co2_min', models.FloatField(blank=True, null=True)),
                ('co2_max', models.FloatField(blank=True, null=True)),
                ('power_kw_min', models.FloatField(blank=True, null=True)),
                ('power_kw_max', models.FloatField(blank=True, null=True)),
                ('occupancy_required', models.BooleanField(default=False)),
                ('sensor_online_required', models.BooleanField(default=True)),
                ('sensitivity_min', models.FloatField(blank=True, null=True)),
                ('sensitivity_max', models.FloatField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'fault_thresholds',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=800)),
                ('code', models.CharField(blank=True, max_length=800, null=True)),
            ],
            options={
                'db_table': 'hotels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('floor_id', models.CharField(blank=True, max_length=255, null=True)),
                ('hotel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.hotel')),
            ],
            options={
                'db_table': 'floors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('room_number', models.TextField(blank=True, null=True)),
                ('floor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.floor')),
            ],
            options={
                'db_table': 'rooms',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('device_identifier', models.TextField(blank=True, null=True)),
                ('sensor_type', models.TextField(blank=True, null=True)),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.room')),
            ],
            options={
                'db_table': 'devices',
                'managed': True,
            },
        ),
    ]
